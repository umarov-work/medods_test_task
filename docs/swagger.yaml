basePath: /api
definitions:
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.MessageResponse:
    properties:
      message:
        type: string
    type: object
  dto.TokensResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.UpdateTokensRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.UserIDResponse:
    properties:
      user_id:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Тестовое задание Medods.
  title: Medods Test Task
  version: "1.0"
paths:
  /auth/create-tokens:
    get:
      consumes:
      - application/json
      description: Генерирует новые токены по userID
      parameters:
      - description: User ID (UUID)
        example: b1506a51-c5a7-45ae-9f2c-4cf700365e46
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Создание access и refresh токенов
      tags:
      - auth
  /auth/deauthorize:
    get:
      consumes:
      - application/json
      description: Деактивирует все refresh токены по userID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Деавторизация пользователя
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Получает userID пользователя по refreshTokenID из контекста
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserIDResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Получение ID пользователя
      tags:
      - auth
  /auth/update-tokens:
    post:
      consumes:
      - application/json
      description: Обновляет токены по access и refresh токенам
      parameters:
      - description: Refresh Token Input
        in: body
        name: updateTokensRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTokensRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Обновление access и refresh токенов
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
